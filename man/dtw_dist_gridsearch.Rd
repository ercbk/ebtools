% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dtw-dist-gridsearch.R
\name{dtw_dist_gridsearch}
\alias{dtw_dist_gridsearch}
\title{Grid Search dtw distance functions}
\usage{
dtw_dist_gridsearch(
  query_tbl,
  ref_series,
  dtw_funs,
  dtw_grids,
  num_best = "all"
)
}
\arguments{
\item{query_tbl}{Data.frame or tibble containing columns of numeric vectors for each query time series that are to compared to the reference time series.}

\item{ref_series}{Numeric vector; the reference time series which is the series that all query series will compared to.}

\item{dtw_funs}{Named list of dtwclust distance functions. Names need to match those in dtw_grids}

\item{dtw_grids}{Object created by \code{\link[=create_dtw_grids]{create_dtw_grids()}} or named nested list of parameter name-value pairs that correspond to the distance functions. Names need to match those in dtw_funs.}

\item{num_best}{Integer or "all"; if an integer, then that number of query series with the lowest distance values for each parameter configuration will be returned; if "all", then all results will be returned. Default is "all".}
}
\value{
A tibble with columns for the names of the query series, names of the distance functions, parameter values, and calculated distances.
}
\description{
\code{\link[=dtw_dist_gridsearch]{dtw_dist_gridsearch()}} performs a gridsearch using a list of parameter grids and a list of distance functions from the dtwclust package.
}
\details{
The distance algorithms currently supported are:
\itemize{
\item dynamic time warping (\code{dtw_basic})
\item dynamic time warping with an additional L2 Norm (\code{dtw2})
\item dynamic time warping with lower bound (\code{dtw_lb})
\item Triangular Global Alignment Kernel (\code{gak})
\item Slope Based Distance (\code{sbd})
}
}
\examples{

library(dtwclust, warn.conflicts = F, verbose = F)

head(ohio_covid)[,1:6]

ref_series <- ohio_covid[["cases"]]
query_tbl <- dplyr::select(ohio_covid, -cases, -date)


params_ls_lg <- list(dtw_basic = list(window.size = 5:10,
                                      norm = c("L1", "L2"),
                                      step.pattern = list(symmetric1, symmetric2)),
                     dtw2 = list(step.pattern = list(symmetric1, symmetric2),
                                 window.size = 5:10),
                     dtw_lb = list(window.size = 5:10,
                                   norm = c("L1", "L2"),
                                   dtw.func = "dtw_basic",
                                   step.pattern = list(symmetric2)),
                     sbd = list(znorm = TRUE, return.shifted = FALSE),
                     gak = list(normalize = TRUE, window.size = 5:10))

dtw_grids_lg <- create_dtw_grids(params_ls_lg)

dtw_funs_lg <- list(dtw_basic = dtw_basic,
                    dtw2 = dtw2,
                    dtw_lb = dtw_lb,
                    sbd = sbd,
                    gak = gak)

search_res_lg <- dtw_dist_gridsearch(query_tbl = query_tbl,
                                     ref_series = ref_series,
                                     dtw_funs = dtw_funs_lg,
                                     dtw_grids = dtw_grids_lg,
                                     num_best = 2)

head(search_res_lg)


# Can still be ran with a minimal "grid"
params_ls_sm <- list(dtw2 = list(step.pattern = list(symmetric1)))

dtw_grids_sm <- create_dtw_grids(params_ls_sm)

dtw_funs_sm <- list(dtw2 = dtw2)

search_res_sm <- dtw_dist_gridsearch(query_tbl = query_tbl,
                                     ref_series = ref_series,
                                     dtw_funs = dtw_funs_sm,
                                     dtw_grids = dtw_grids_sm,
                                     num_best = "all")

head(search_res_sm)

}
\seealso{
\code{\link[=create_dtw_grids]{create_dtw_grids()}} \code{\link[dtwclust:dtw_basic]{dtwclust::dtw_basic()}}, \code{\link[dtwclust:dtw2]{dtwclust::dtw2()}}, \code{\link[dtwclust:dtw_lb]{dtwclust::dtw_lb()}}, \code{\link[dtwclust:GAK]{dtwclust::gak()}}, \code{\link[dtwclust:SBD]{dtwclust::sbd()}}
}
