% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to-js-array.R
\name{to_js_array}
\alias{to_js_array}
\title{Converts data columns to a js array}
\usage{
to_js_array(.data, .grp_var, ..., array_name)
}
\arguments{
\item{.data}{tibble; data with grouping column and columns to be used to create the js array column}

\item{.grp_var}{grouping column}

\item{...}{columns in .data that are to be used to create the js array column}

\item{array_name}{string; name of the newly created js array column}
}
\value{
tibble with grouping column and js array column
}
\description{
\code{\link[=to_js_array]{to_js_array()}} takes a tibble with a grouping column and columns that are to be combined into a js array
}
\details{
The js array column that's created is list column of form <array_name> = list(list(array_var1=var1val1, array_var2 = var2val1, ...), list(array_var1=var1val2, array_var2=var2val2, ...), ...) for each grouping variable category.
I like to use the \href{https://timelyportfolio.github.io/dataui/articles/dataui_reactable.html}{dataui package} along with the \href{https://glin.github.io/reactable/index.html}{reactable package}. \code{dataui} is still in more of a developmental phase and requires the data to be in this js array like format.
}
\examples{

head(indiana_pos_rate)

pos_rate_array <- to_js_array(.data = indiana_pos_rate,
                              .grp_var = msa,
                              end_date, pos_rate,
                              array_name = "posList")

head(pos_rate_array)
}
